---
title: "Creating a basic data structure (BDS) Exposure ADaM"
author: "Lun-Hsien Chang"
date: "01-Dec-2024"
toc: true
toc-depth: 2  # Levels of headings to include in TOC (e.g., 2 includes H1 and H2)
toc-title: "Programming workflow"  # Custom title for the TOC
format:
  html:
    css: styles.css  # Use custom CSS for soft-wrap in HTML
  pdf: 
    latex_engine: xelatex
    header-includes:
      - \usepackage{listings}
      - \lstset{breaklines=true, breakatwhitespace=true, basicstyle=\ttfamily\small, columns=fullflexible}
    fontsize: 11pt
    geometry: margin=1in, left=1in, right=1in, top=1in, bottom=1in
    mainfont: "Times New Roman"
    fontenc: T1
    citation_package: natbib
    urlcolor: blue       # Make URLs blue
    linkcolor: blue      # Make links in the PDF blue
    hyperref: true
  markdown:
    variant: gfm         # Use GitHub Flavored Markdown
    embed-resources: true # Embed images and other resources
output-dir: "outputs"
editor: visual
source: "https://cran.r-project.org/web/packages/admiral/vignettes/bds_exposure.html"
---

Get required R packages

```{r}
#| echo: false
library(admiral)
library(dplyr, warn.conflicts = FALSE)
library(pharmaversesdtm)
library(lubridate)
library(stringr)
library(tibble)
```

# Read CDISC pilot SDTM and ADaM datasets

```{r}
#| echo: false
data("admiral_adsl")
data("ex")

adsl <- admiral_adsl # dim(adsl) 306 50
ex <- convert_blanks_to_na(ex) # dim(ex) 591 17
```

## TRTSDT

-   Date of First Exposure to Treatment

-   Date of first exposure to treatment for a subject in a study. TRTSDT and/or TRTSDTM are required if there is an investigational product. Note that TRTSDT is not required to have the same value as the SDTM DM variable RFXSTDTC. While both of these dates reflect the concept of first exposure, the ADaM date may be derived to support the analysis which may not necessarily be the very first date in the SDTM EX domain.

## TRTSTM

-   Time of First Exposure to Treatment

-   Time of first exposure to treatment for a subject in a study.

## TRTSDTM

-   Datetime of First Exposure to Treatment

-   Datetime of first exposure to treatment for a subject in a study. TRTSDT and/or TRTSDTM are required if there is an investigational product.

## TRTSDTF

-   Date of First Exposure Imputation Flag

-   The level of imputation of date of first exposure to treatment. If TRTSDT (or the date part of TRTSDTM) was imputed, TRTSDTF must be populated and is required. See Section 3.1.3, Date and Time Imputation Flag Variables.

## TRTSTMF

-   Time of First Exposure Imputation Flag

-   The level of imputation of time of first exposure to treatment. If TRTSTM (or the time part of TRTSDTM) was imputed, TRTSTMF must be populated and is required. See Section 3.1.3, Date and Time Imputation Flag Variables.

## TRTEDT

-   Date of Last Exposure to Treatment

-   Date of last exposure to treatment for a subject in a study. TRTEDT and/or TRTEDTM are required if there is an investigational product. Note that TRTEDT is not required to have the same value as the SDTM DM variable RFXENDTC. While both of these dates reflect the concept of last exposure, the ADaM date may be derived to support the analysis which may not necessarily be the very last date in the SDTM EX domain.

## TRTETM

-   Time of Last Exposure to Treatment

-   Time of last exposure to treatment for a subject in a study.

## TRTEDTM

-   Datetime of Last Exposure to Treatment

-   Datetime of last exposure to treatment for a subject in a study. TRTEDT and/or TRTEDTM are required if there is an investigational product.

```{r}
#| wrap: true
adsl_vars <- exprs(TRTSDT, TRTSDTM, TRTEDT, TRTEDTM)

# left join EX and adsl TRTSDT, TRTSDTM, TRTEDT, TRTEDTM on ex.STUDYID=adslSTUDYID and ex.USUBJID=adsl.USUBJID
adex <- derive_vars_merged(
   dataset=ex
  ,dataset_add = adsl
  ,new_vars = adsl_vars
  ,by_vars = exprs(STUDYID, USUBJID)
  ) # dim(adex) 591 21
```

The CDISC pilot `EX` domain data does not contain a dose adjustment flag or the planned dose information. For demonstration purposes, this will be added to the data.

## EXADJ

-   Exposure Adjustment ?

## EXDOSE

-   exposure dose

-   from SDTM.EX.EXDOSE

## EXPLDOS

-   Planned Dose

```{r}
adex <- adex %>%
  mutate(
    EXADJ = case_when(
      USUBJID == "01-701-1028" & VISIT %in% c("WEEK 2") ~ "ADVERSE EVENT",
      USUBJID == "01-701-1148" & VISIT %in% c("WEEK 2", "WEEK 24") ~ "MEDICATION ERROR",
      TRUE ~ NA_character_
    ),
    EXDOSE = case_when(
      USUBJID == "01-701-1028" & VISIT %in% c("WEEK 2") ~ 0,
      USUBJID == "01-701-1148" & VISIT %in% c("WEEK 2", "WEEK 24") ~ 0,
      TRUE ~ EXDOSE
    )
  ) %>%
  mutate(EXPLDOS = if_else(EXTRT == "PLACEBO", 0, 54))

adex %>% select(EXTRT, EXPLDOS) %>% distinct()
```

# Derive numeric datetime, analysis day variables

## ASTDT

-   Analysis Start Date

-   The start date associated with AVAL and/or AVALC. ASTDT and AENDT may be useful for traceability when AVAL summarizes data collected over an interval of time, or when AVAL is a duration.

-   Set to a numeric form of EX.EXSTDTC when EX.EXSTDTC consists of a full date.

## ASTTM

-   Analysis Start Time

-   The start time associated with AVAL and/or AVALC. ASTTM and AENTM may be useful for traceability when AVAL summarizes data collected over an interval of time, or when AVAL is a duration.

## ASTDTM

-   Analysis Start Datetime

-   The start datetime associated with AVAL and/or AVALC. ASTDTM and AENDTM may be useful for traceability when AVAL summarizes data collected over an interval of time, or when AVAL is a duration.

## AENDT

-   Analysis End Date

-   The end date associated with AVAL and/or AVALC. See also ASTDT.

-   Set to a numeric form of EX.EXENDTC when EX.EXENDTC consists of a full date.

## AENTM

-   Analysis End Time

-   The end time associated with AVAL and/or AVALC. See also ASTTM.

## AENDTM

-   Analysis End Datetime

-   The end datetime associated with AVAL and/or AVALC. See also ASTDTM.

```{r}
# Convert character datetime to numeric datetime
adex <- derive_vars_dt(adex, new_vars_prefix = "AST", dtc = EXSTDTC)
adex <- derive_vars_dt(adex, new_vars_prefix = "AEN", dtc = EXENDTC) # dim(adex) 591 25
adex %>% select(USUBJID,VISIT,EXSTDTC,EXENDTC,ASTDT,AENDT) %>% head()
```

The next examples demonstrates the datetime imputation features available in the `derive_vars_dtm()` function, where the time is imputed as “00:00:00”:

```{r}
adex <- derive_vars_dtm(
  adex
  ,dtc = EXSTDTC
  # Impute dtc date to the first day of the month
  ,highest_imputation = "M"
  ,date_imputation = "first"
  ,new_vars_prefix = "AST"
)

adex <- derive_vars_dtm(
  adex,
  dtc = EXENDTC,
  # Impute dtc date to the last day of the month
  highest_imputation = "M",
  date_imputation = "last",
  new_vars_prefix = "AEN"
)

adex %>% select(EXSTDTC,EXENDTC,ASTDTM,AENDTM) %>% head()
```

## ASTDY

-   Analysis Start Relative Day

-   The number of days from an anchor date (not necessarily DM.RFSTDTC) to ASTDT. See Section 3.1.2, Timing Variable Conventions. If a dataset contains more than one record per parameter per subject then, an SDTM or ADaM relative timing variable must be present (ASTDY would meet this requirement).

-   \`ASTDT-TRTSDT+1\`

## AENDY

-   Analysis End Relative Day

-   The number of days from an anchor date (not necessarily DM.RFSTDTC) to AENDT. See Section 3.1.2, Timing Variable Conventions. If a dataset contains more than one record per parameter per subject, then an SDTM or ADaM relative timing variable must be present (AENDY would meet this requirement).

-   \`AENDT-TRTSDT+1\`

```{r}
adex <- derive_vars_dy(
  dataset=adex
  ,reference_date = TRTSDT
  ,source_vars = exprs(ASTDT, AENDT)
  ) # dim(adex) 591 33
adex %>% select(TRTSDT, ASTDT, ASTDY, AENDT, AENDY) %>% head()
```

# Compute duration for a record

## EXDURD

-   Duration of treatment or exposure

-   \`EXDURD=AENDT - ASTDT +1\`

```{r}
adex <- adex %>%
  derive_vars_duration(
    new_var = EXDURD
    ,start_date = ASTDT
    ,end_date = AENDT 
    # duration unit can be "years", "months", "weeks", "days", "hours", "minutes", "seconds"
    ,out_unit = "DAYS")

adex %>% select(ASTDT, AENDT, EXDURD) %>% head()
```

## DOSEO

-   Dose Overall (?). Refers to the actual dose of the study drug administered, standardized (e.g., per unit of body weight, such as mg/kg).

-   \``EXDOSE * EXDURD`\`

## PDOSEO

-   Planned Dose Overall (?) Represents the planned dose per protocol, similarly normalized
-   \`EXPLDOS \* EXDURD\`

```{r}
adex <- adex %>%
  mutate(
    DOSEO = EXDOSE * EXDURD
    ,PDOSEO = EXPLDOS * EXDURD)

adex %>% select(USUBJID, EXDOSE, EXPLDOS, EXDURD, DOSEO, PDOSEO) %>% head()
```

# Create 1:1 mapping records

The first set of exposure records to create will be records mapped 1:1 to an existing collected exposure record in SDTM. For these records, the `AVAL` or `AVALC` would be calculated using columns that exist on the data and no summarizing of records would be necessary.

These records may be used for input into summary records or be used individually for summarization in outputs. Some examples may be exposure duration, dose administered, dose adjusted, etc. based on one exposure record in SDTM.

These records can be derived using simple `dplyr::mutate` assignments and then combined

## PARAMCD

-   Parameter Code

## AVALC

-   Analysis Value (c)

```{r}
adex_durd <- adex %>%
  mutate(
    PARAMCD = "DURD",
    AVAL = EXDURD)

adex_dose <- adex %>%
  mutate(
    PARAMCD = "DOSE",
    AVAL = DOSEO)

adex_pldos <- adex %>%
  mutate(
    PARAMCD = "PLDOSE",
    AVAL = PDOSEO)

adex_adj <- adex %>%
  mutate(
    PARAMCD = "ADJ",
    AVALC = if_else(!is.na(EXADJ), "Y", NA_character_)
  )

adex_adjae <- adex %>%
  mutate(
    PARAMCD = "ADJAE",
    AVALC = if_else(EXADJ == "ADVERSE EVENT", "Y", NA_character_)
  )

adex <- bind_rows(
  adex_durd,
  adex_dose,
  adex_pldos,
  adex_adj,
  adex_adjae) %>%
  mutate(PARCAT1 = "INDIVIDUAL") # dim(adex) 2955 40

adex %>% select(USUBJID,VISIT,ASTDT,AENDT,PARAMCD,AVAL,AVALC) %>% head()
```

# Create Summary Records

Exposure is commonly analyzed by a timing interval (e.g. `APHASE`, `APERIOD`, `AVISIT`, etc.). For these types of calculations, the `derive_param_exposure()` function may be used. In addition to creating a summarized `AVAL`, the function will also compute minimum and maximum dates for the record. For example, to calculate the total dose by subject and treatment

```{r}
adex <- derive_param_exposure(
  dataset = adex
  ,dataset_add = adex
  ,by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars)
  ,input_code = "DOSE"
  ,set_values_to = exprs(
    PARAMCD = "TDOSE",
    PARCAT1 = "OVERALL",
    AVAL = sum(AVAL, na.rm = TRUE)
  )
) # dim(adex) 3209 40
```

A record with `PARAMCD == "TDOSE"` is created with `PARCAT1` set to `"OVERALL"` using the records in `ADEX` where `PARAMCD == "DOSE"` by summing `AVAL`. In addition, the `ASTDT`, and `AENDT` are created as the minimum and maximum date/times associated with each `by_vars` grouping. Note that, in addition to `PARAMCD`, `PARCAT1`, `AVAL`, `ASTDT` and `AENDT`, only those variables specified in the `by_vars` argument will be populated in the new records.

```{r}
adsl_vars <- exprs(TRTSDT, TRTSDTM, TRTEDT, TRTEDTM)

# Remove existing TDOSE records
adex <- adex %>% filter(PARAMCD != "TDOSE")

# Derive new records for the parameter TDOSE (Total Dose) by summarizing exposure data
adex <- derive_param_exposure(
  dataset = adex
  ,dataset_add = adex
  ,by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars)
  # Specifies which parameter (DOSE) to summarize. This tells the function to use rows with PARAMCD = "DOSE" for calculations.
  ,input_code = "DOSE"
  ,set_values_to = exprs(
    PARAMCD = "TDOSE"
    ,PARCAT1 = "OVERALL"
    ,AVAL = sum(AVAL, na.rm = TRUE)
    )
  ) # dim(adex) 3209 40
```

Multiple parameters (records) may be created at one time using the `call_derivation()` function:

```{r}
unique(adex$PARAMCD) # [1] "DURD"   "DOSE"   "PLDOSE" "ADJ"    "ADJAE"  "TDOSE"

adex <- adex %>%
  filter(!PARAMCD %in% c("TDOSE", "TPDOSE", "TDURD", "TADJ", "TADJAE")) # dim(adex) 2955 40

# Derive new records for multiple parameters by summarizing exposure data
adex <- adex %>%
  call_derivation(
    derivation = derive_param_exposure,
    variable_params = list(
      params(
        set_values_to = exprs(
          PARAMCD = "TDOSE",
          PARCAT1 = "OVERALL",
          AVAL = sum(AVAL, na.rm = TRUE)
        ),
        input_code = "DOSE"
      ),
      params(
        set_values_to = exprs(
          PARAMCD = "TPDOSE",
          PARCAT1 = "OVERALL",
          AVAL = sum(AVAL, na.rm = TRUE)
        ),
        input_code = "PLDOSE"
      ),
      params(
        set_values_to = exprs(
          PARAMCD = "TDURD",
          PARCAT1 = "OVERALL",
          AVAL = sum(AVAL, na.rm = TRUE)
        ),
        input_code = "DURD"
      ),
      params(
        set_values_to = exprs(
          PARAMCD = "TADJ",
          PARCAT1 = "OVERALL",
          AVALC = if_else(sum(!is.na(AVALC)) > 0, "Y", NA_character_)
        ),
        input_code = "ADJ"
      ),
      params(
        set_values_to = exprs(
          PARAMCD = "TADJAE",
          PARCAT1 = "OVERALL",
          AVALC = if_else(sum(!is.na(AVALC)) > 0, "Y", NA_character_)
        ),
        input_code = "ADJAE"
      )
    ),
    dataset_add = adex,
    by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars)
  )

count(adex, PARAMCD, PARCAT1)
```

```{r}
# Count rows per by group using dplyr, producing the same result as count(adex, PARAMCD, PARCAT1)
adex %>% group_by(PARAMCD, PARCAT1) %>% summarize(n = n(), .groups = "drop")
```

Dose intensity can be calculated using the function `derive_param_doseint()`. The planned dose and administered dose are passed into the function and a new record is created with the dose intensity calculation. Again, only those variables specified in the `by_vars` argument will be populated in this new record.

```{r}
dim(adex) # 4225 40

adex <- adex %>%
  derive_param_doseint(
    by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars),
    set_values_to = exprs(PARAMCD = "TNDOSINT"),
    tadm_code = "TDOSE",
    tpadm_code = "TPDOSE") # dim(adex) 4479 40
```

The default calculation for dose intensity is: `Administered Doses / Planned Doses * 100`. Please see the `derive_param_doseint()` documentation to see how planned doses of 0 or NA are handled.

# Assign `PARAMCD`, `PARAMN`, etc. from Reference tables

To assign parameter level values such as `PARAM`, `PARAMN`, `PARCAT1`, etc., a lookup can be created to join to the source data.

```{r}
# param_lookup not found

# adex <- derive_vars_merged(
#   adex,
#   dataset_add = param_lookup,
#   by_vars = exprs(PARAMCD)
# )

#count(adex, PARAMCD, PARAM, PARAMN)
```

# Derive Categorization Variables

## AVALCATy

`{admiral}` does not currently have a generic function to aid in assigning `AVALCATx`/ `AVALCAxN` values. Below is a simple example of how these values may be assigned using the `dplyr::mutate` function:

```{r}
adex <- adex %>%
  mutate(
    AVALCAT1 = case_when(
      PARAMCD %in% c("TDURD") & AVAL < 30 ~ "< 30 days",
      PARAMCD %in% c("TDURD") & AVAL >= 30 & AVAL < 90 ~ ">= 30 and < 90 days",
      PARAMCD %in% c("TDURD") & AVAL >= 90 ~ ">=90 days",
      PARAMCD %in% c("TDOSE", "TPDOSE") & AVAL < 1000 ~ "< 1000 mg",
      PARAMCD %in% c("TDOSE", "TPDOSE") & AVAL >= 1000 ~ ">= 1000 mg",
      TRUE ~ NA_character_
    )
  )
adex %>% select(USUBJID,VISIT,PARCAT1,PARAMCD,AVAL,AVALCAT1) %>% filter(!is.na(AVALCAT1)) %>% head()
```

# Assign `ASEQ`

## ASEQ

-   Analysis Sequence

The `{admiral}` function `derive_var_obs_number()` can be used to derive `ASEQ`. An example call is:

```{r}
# Not working as PARAMN is not found
#adex <- derive_var_obs_number(
#  adex,
#  new_var = ASEQ,
#  by_vars = exprs(STUDYID, USUBJID),
#  order = exprs(PARCAT1, ASTDT, VISIT, VISITNUM, EXSEQ, PARAMN),
#  check_type = "error"
#)

#adex %>% select(USUBJID,,VISIT,PARCAT1,PARAMCD,AVAL,ASTDT,ASEQ) %>% head()
```

If needed, the other `ADSL` variables can now be added:

```{r}
# Deselect variables using negate_vars()
#adex <- adex %>%
#  derive_vars_merged(
#    dataset_add = select(adsl, !!!negate_vars(adsl_vars)),
#    by_vars = exprs(STUDYID, USUBJID)
#  )
```

# Add Labels and Attributes

Adding labels and attributes for SAS transport files is supported by the following packages:

-   [metacore](https://atorus-research.github.io/metacore/): establish a common foundation for the use of metadata within an R session.

-   [metatools](https://pharmaverse.github.io/metatools/): enable the use of metacore objects. Metatools can be used to build datasets or enhance columns in existing datasets as well as checking datasets against the metadata.

-   [xportr](https://atorus-research.github.io/xportr/): functionality to associate all metadata information to a local R data frame, perform data set level validation checks and convert into a [transport v5 file(xpt)](https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.5/movefile/n1xbwdre0giahfn11c99yjkpi2yb.htm).

# References

[Creating a BDS Exposure ADaM](https://cran.r-project.org/web/packages/admiral/vignettes/bds_exposure.html)

[ADaM Subject-level Analysis - ADSL Dataset](https://www.cdisc.org/kb/examples/adam-subject-level-analysis-adsl-dataset-80283806)
