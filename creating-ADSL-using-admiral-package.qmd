---
title: "Creating ADaM Subject-level Analysis (ADSL) using R admiral package"
author: "Lun-Hsien Chang"
date: "29-Nov-2024"
toc: true
toc-depth: 2  # Optional: Levels of headings to include in TOC (e.g., 2 includes H1 and H2)
toc-title: "Programming workflow"  # Optional: Custom title for the TOC
format:
  html: default          # Retain HTML format
  pdf: 
    default: true        # Use default PDF format
    latex_engine: xelatex
    fontsize: 11pt
    geometry: margin=1in, left=1in, right=1in, top=1in, bottom=1in
    mainfont: "Times New Roman"
    fontenc: T1
    citation_package: natbib
    urlcolor: blue       # Optional: make URLs blue
    linkcolor: blue      # Optional: make links in the PDF blue
    hyperref: true
  markdown:
    variant: gfm         # Use GitHub Flavored Markdown
    embed-resources: true # Optional: Embed images and other resources
output-dir: "outputs"
editor: visual
source: "https://cran.r-project.org/web/packages/admiral/vignettes/adsl.html"
---

Get required R packages

```{r}
#| echo: false
library(admiral)
library(dplyr, warn.conflicts = FALSE)
library(pharmaversesdtm)
library(lubridate)
library(stringr)
```

# Read CDISC pilot SDTM datasets

```{r}
#| echo: false
data("dm")
data("ds")
data("ex")
data("ae")
data("lb")

dm <- convert_blanks_to_na(dm) # dim(dm) 306 25
ds <- convert_blanks_to_na(ds) # dim(ds) 850 13
ex <- convert_blanks_to_na(ex) # dim(ex) 591 17
ae <- convert_blanks_to_na(ae) # dim(ae) 1191 35
lb <- convert_blanks_to_na(lb) # dim(lb) 59580 23
```

# Derive treatment variables

## TRT01P

-   **P**lanned **Tr**ea**t**ment for Period **01**

-   Derived from DM.ARM

## TRT01A

-   **A**ctual **Tr**ea**t**ment for Period **01**

-   Derived from DM.ACTARM

```{r}
adsl <- dm %>%
  dplyr::select(-DOMAIN) %>%
  dplyr::mutate(TRT01P = ARM, TRT01A = ACTARM) # dim(adsl) 306 26
```

# Derive treatment datetime, duration variables

## EXSTDTM

-   Numeric start datetime of exposure derived from character EXSTDTC

-   Date with missing time can be imputated. e.g., EXSTDTC="2014-01-02" –\> EXSTDTM= 2014-01-02 00:00:00

## EXSTTMF

## EXENDTM

-   Numeric end datetime of exposure derived from character EXENDTC

-   Date with missing time can be imputed. E.g., EXENDTC="2014-01-16" –\> EXENDTM=2014-01-16 23:59:59

## EXENTMF

```{r}
# Derive a datetime object --DTM from a date character vector --DTC
ex_ext <- ex %>%
  admiral::derive_vars_dtm(
    dtc = EXSTDTC
    ,new_vars_prefix = "EXST"
    ,time_imputation = "first") %>%
  admiral::derive_vars_dtm(
    dtc = EXENDTC
    ,new_vars_prefix = "EXEN"
    ,time_imputation = "last") # dim(ex_ext) 591 21

ex_ext %>% select(EXSTDTC, EXSTDTM, EXSTTMF, EXENDTC, EXENDTM, EXENTMF) %>% head()
```

## TRTSDTM

-   Datetime of First Exposure to Treatment

-   Numeric version of datetime derived from DM.RFXSTDTC (but here it is from EXSTDTM)

## TRTEDTM

-   Datetime of Last Exposure to Treatment

-   Numeric version of datetime derived from DM.RFXENDTC (but here it is from EXENDTM)

```{r}
# Left join adsl and ex_ext
# new variables added: "TRTSDTM" "TRTSTMF"  "TRTEDTM"  "TRTETMF"
adsl <- adsl %>%
  derive_vars_merged(
    dataset_add = ex_ext
    # Observations from dataset_add that meet the conditions will be merged to adsl
    ,filter_add = (EXDOSE > 0 |
                    (EXDOSE == 0 &
                     str_detect(EXTRT, "PLACEBO"))) & !is.na(EXSTDTM)
    ,new_vars = exprs(TRTSDTM = EXSTDTM, TRTSTMF = EXSTTMF)
    ,order = exprs(EXSTDTM, EXSEQ)
    ,mode = "first"
    ,by_vars = exprs(STUDYID, USUBJID)) %>%
  derive_vars_merged(
    dataset_add = ex_ext,
    filter_add = (EXDOSE > 0 |
                    (EXDOSE == 0 &
                       str_detect(EXTRT, "PLACEBO"))) & !is.na(EXENDTM),
    new_vars = exprs(TRTEDTM = EXENDTM, TRTETMF = EXENTMF),
    order = exprs(EXENDTM, EXSEQ),
    mode = "last",
    by_vars = exprs(STUDYID, USUBJID)
  ) # dim(adsl) after merging: 306 30 # dim(adsl) before merging: 306 26

# Old variables
ex_ext %>% select(EXSTDTM, EXSTTMF,EXENDTM, EXENTMF) %>% head()
```

```{r}
# New variables
adsl %>% select(TRTSDTM, TRTSTMF, TRTEDTM, TRTETMF) %>% head()
```

## TRTSDT

-   Date of First Exposure to Treatment

-   Numeric version of date portion of DM.RFXSTDTC formatted as a SAS date (But here it is from TRTSDTM)

## TRTEDT

-   Date of Last Exposure to Treatment

-   Numeric version of date portion of DM.RFXENDTC formatted as a SAS date (But here it is from TRTEDTM)

## TRTDURD

-   Treatment duration

-   \`TRTDURD= TRTEDT- TRTSDT+1\`

```{r}
# New variables added: "TRTSDT" "TRTEDT" "TRTDURD"
adsl <- adsl %>%
  # Derive date variables from datetime variables
  admiral::derive_vars_dtm_to_dt(source_vars = exprs(TRTSDTM, TRTEDTM)) %>%
  # Derives total treatment duration (days) (TRTDURD). TRTDURD= TRTEDT- TRTSDT+1
  admiral::derive_var_trtdurd() # dim(adsl) 306 33

adsl %>% select(TRTSDT, TRTEDT, TRTDURD) %>% head()
```

# Derive disposition variables

## DSSTDT

-   Convert character disposition date DS.DSSTDTC to numeric date DSSTDT using `derive_vars_dt()`

## EOSDT

-   End of Study Date

-   Numeric version of DS.DSSTDTC or data cutoff date

```{r}
# New variable added: DSSTDT
ds_ext <- admiral::derive_vars_dt(dataset = ds # dim(ds) 850 13
                                  ,dtc = DSSTDTC
                                  ,new_vars_prefix = "DSST") # dim(ds_ext) 850 14
ds_ext %>% select(DSSTDTC, DSSTDT) %>% tail()
```

```{r}
# Check protocol milestones
ds_ext %>% filter(DSCAT=="PROTOCOL MILESTONE") %>% distinct(DSDECOD)
```

```{r}
# Check disposition events
ds_ext %>% filter(DSCAT=="DISPOSITION EVENT") %>% distinct(DSDECOD)
```

```{r}
# Left join adsl and ds_ext
# New variable added: EOSDT
adsl <- admiral::derive_vars_merged(
  dataset=adsl # dim(adsl) 306 33
  ,dataset_add = ds_ext
  ,by_vars = exprs(STUDYID, USUBJID)
  ,new_vars = exprs(EOSDT = DSSTDT)
  ,filter_add = DSCAT == "DISPOSITION EVENT" & DSDECOD != "SCREEN FAILURE") # dim(adsl) 306 34

adsl %>% select(USUBJID, EOSDT) %>% tail()
```

## EOSSTT

-   Subject’s status as of the end of study or data cutoff. Examples: COMPLETED, DISCONTINUED, ONGOING.

-   Derived based on DS.DSCAT and DS.DSDECOD

```{r}
# Example function format_eosstt():
format_eosstt <- function(x) {
  case_when(
    x %in% c("COMPLETED") ~ "COMPLETED"
    ,x %in% c("SCREEN FAILURE") ~ NA_character_
    ,TRUE ~ "DISCONTINUED")
}

# New variables added: EOSSTT (End of Study Status)
adsl <- adsl %>%
  derive_vars_merged(
     dataset_add = ds
    ,by_vars = exprs(STUDYID, USUBJID)
    ,filter_add = DSCAT == "DISPOSITION EVENT"
    ,new_vars = exprs(EOSSTT = format_eosstt(DSDECOD))
    ,missing_values = exprs(EOSSTT = "ONGOING")
    ) # dim(adsl) 306 34 before merging # dim(adsl) 306 35 after merging

adsl %>% select(USUBJID, EOSDT,EOSSTT) %>% tail()
```

## DCSREAS

-   Reason for Discontinuation from Study

-   If DS.DSDECOD \<\> "COMPLETED where DSSCAT = "STUDY PARTICIPATION" (i.e. ADSL.EOSSTT is "DISCONTINUED") then ADSL.DCSREAS = DS.DSDECOD; If DS.DSDECOD = "COMPLETED" where DSSCAT = "STUDY PARTICIPATION", then ADSL.DCSREAS is <null>; If there is no DS record where DSSCAT = "STUDY PARTICIPATION" (i.e. EOSSTT is "ONGOING") then ADSL.DCSREAS is null.

## DCSREASP

-   Reason Specified for Discontinuation from Study

-   If DS.DSDECOD \<\> "COMPLETED" where DS.DSSCAT = "STUDY PARTICIPATION" (i.e. ADSL.EOSSTT is "DISCONTINUED") CO.COVAL / CO.COVAL1 where COREF = "PRIMARY REASON FOR STUDY DISCONTINUATION" (if populated); otherwise ADSL.DCSREASP is null.

```{r}
adsl <- adsl %>%
  derive_vars_merged(
    dataset_add = ds
    ,by_vars = exprs(USUBJID)
    ,new_vars = exprs(DCSREAS = DSDECOD, DCSREASP = DSTERM)
    ,filter_add = DSCAT == "DISPOSITION EVENT" &
      !(DSDECOD %in% c("SCREEN FAILURE", "COMPLETED", NA))
    ) # dim(adsl) 306 35 before merging # dim(adsl) 306 37 after merging

adsl %>% select(USUBJID,EOSDT,EOSSTT,DCSREAS,DCSREASP) %>% head()
```

## RANDDT

-   Date of Randomization

-   DS.DSSTDTC is a character (text) variable with date in ISO 8601 format: YYYY-MM-DD (e.g. 1997-07-16). ADSL.RANDDT is the DS.DSSTDTC where DSDECOD = "RANDOMIZED", SAS date format DATE11.; If a subject was not randomized (e.g. Screen Failure) and there is no record in DS for the subject where DSDECOD = "Randomized" then ADSL.RANDDT is null.

```{r}
adsl <- adsl %>%
  derive_vars_merged(
    dataset_add = ds_ext
    ,filter_add = DSDECOD == "RANDOMIZED"
    ,by_vars = exprs(STUDYID, USUBJID)
    ,new_vars = exprs(RANDDT = DSSTDT)
  )
adsl %>% select(USUBJID,RANDDT) %>% head()
```

# Derive death variables

## DTHDT

-   Death date

-   Convert character DM.DTHDTC to numeric DTHDT

```{r}
adsl <- adsl %>%
  derive_vars_dt(
    new_vars_prefix = "DTH"
    ,dtc = DTHDTC
    #,date_imputation = "first"
    ) # dim(adsl) 306 39

adsl %>% select(USUBJID,TRTEDT, DTHDTC, DTHDT) %>% filter(!is.na(DTHDT)) %>% head()

```

## DTHCAUS

-   Cause of death

-   if the date of death is collected in the AE form when the AE is Fatal, the cause of death would be set to the preferred term (`AEDECOD`) of that Fatal AE, while if the date of death is collected in the `DS` form, the cause of death would be set to the disposition term (`DSTERM`). To achieve this, the \``` event()` `` objects within \``` derive_vars_extreme_event()` `` must be specified and defined such that they fit the study requirement.

## DTHDOM

-   Death Domain

-   Store the domain where the date of death is collected

## DTHSEQ

-   Death Sequence Number

-   Store the `xxSEQ` value of that domain

```{r}
# New variables: DTHCAUS, DTHDOM, DTHSEQ
adsl <- adsl %>%
  #select(-DTHCAUS) %>% # remove it before deriving it again
  derive_vars_extreme_event(
    by_vars = exprs(STUDYID, USUBJID),
    events = list(
      event(
        dataset_name = "ae",
        condition = AEOUT == "FATAL",
        set_values_to = exprs(DTHCAUS = AEDECOD, DTHDOM = "AE", DTHSEQ = AESEQ),
      ),
      event(
        dataset_name = "ds",
        condition = DSDECOD == "DEATH" & grepl("DEATH DUE TO", DSTERM),
        set_values_to = exprs(DTHCAUS = DSTERM, DTHDOM = "DS", DTHSEQ = DSSEQ),
      )
    ),
    source_datasets = list(ae = ae, ds = ds),
    tmp_event_nr_var = event_nr,
    order = exprs(event_nr),
    mode = "first",
    new_vars = exprs(DTHCAUS, DTHDOM, DTHSEQ)
  ) # dim(adsl) 306 42

adsl %>% select(USUBJID, DTHDT, DTHCAUS, DTHDOM, DTHSEQ) %>% filter(!is.na(DTHDT)) %>% head()
```

Following the derivation of `DTHCAUS` and related traceability variables, it is then possible to derive grouping variables such as death categories (`DTHCGRx`) using standard tidyverse code.

```{r}
adsl <- adsl %>%
  mutate(DTHCGR1 = case_when(
    is.na(DTHDOM) ~ NA_character_,
    DTHDOM == "AE" ~ "ADVERSE EVENT",
    str_detect(DTHCAUS, "(PROGRESSIVE DISEASE|DISEASE RELAPSE)") ~ "PROGRESSIVE DISEASE",
    TRUE ~ "OTHER"
  )) # dim(adsl) 306 43

adsl %>% filter(!is.na(DTHDT)) %>% select(USUBJID, DTHCAUS, DTHDOM, DTHCGR1) %>% head()
```

## DTHADY

-   Relative Day of Death

-   `DTHADY=DTHDT-TRTSDT+1`

```{r}
adsl <- adsl %>%
  derive_vars_duration(
    new_var = DTHADY,
    start_date = TRTSDT,
    end_date = DTHDT
  ) # dim(adsl) 306 44

adsl %>% filter(!is.na(DTHDT)) %>% select(USUBJID, TRTSDT, DTHDT, DTHADY) %>% head()
```

## LDDTHELD

-   Numbers of days from last dose to death

-   `LDDTHELD=DTHDT-TRTEDT`

```{r}
adsl <- adsl %>%
  derive_vars_duration(
    new_var = LDDTHELD,
    start_date = TRTEDT,
    end_date = DTHDT,
    add_one = FALSE
  ) # dim(adsl) 306 45

adsl %>% filter(!is.na(DTHDT)) %>% select(USUBJID, TRTEDT, DTHDT, LDDTHELD) %>% head()
```

## LSTALVDT

-   Last Date Known Alive

-   Similarly as for the cause of death (`DTHCAUS`), the last known alive date (`LSTALVDT`) can be derived from multiples sources using \``` derive_vars_extreme_event()` ``.

```{r}
adsl <- adsl %>%
  derive_vars_extreme_event(
    by_vars = exprs(STUDYID, USUBJID),
    events = list(
      event(
        dataset_name = "ae",
        order = exprs(AESTDTC, AESEQ),
        condition = !is.na(AESTDTC),
        set_values_to = exprs(
          LSTALVDT = convert_dtc_to_dt(AESTDTC, highest_imputation = "M"),
          seq = AESEQ
        ),
      ),
      event(
        dataset_name = "ae",
        order = exprs(AEENDTC, AESEQ),
        condition = !is.na(AEENDTC),
        set_values_to = exprs(
          LSTALVDT = convert_dtc_to_dt(AEENDTC, highest_imputation = "M"),
          seq = AESEQ
        ),
      ),
      event(
        dataset_name = "lb",
        order = exprs(LBDTC, LBSEQ),
        condition = !is.na(LBDTC),
        set_values_to = exprs(
          LSTALVDT = convert_dtc_to_dt(LBDTC, highest_imputation = "M"),
          seq = LBSEQ
        ),
      ),
      event(
        dataset_name = "adsl",
        condition = !is.na(TRTEDT),
        set_values_to = exprs(LSTALVDT = TRTEDT, seq = 0),
      )
    ),
    source_datasets = list(ae = ae, lb = lb, adsl = adsl),
    tmp_event_nr_var = event_nr,
    order = exprs(LSTALVDT, seq, event_nr),
    mode = "last",
    new_vars = exprs(LSTALVDT)
  ) # dim(adsl) 306 46

adsl %>% select(USUBJID, TRTEDT, DTHDT, LSTALVDT) %>% head()
```

# Derive grouping, population variables

## AGEGR1

-   Pooled Age Group 1

-   Study-specific threshold. e.g. If ADSL.AGE \< 65, AGEGR1 = "\<65"; If ADSL.AGE = 65 or if ADSL.AGE \> 65, AGEGR1 = "\>=65"

## REGION1

-   Study-specific grouping variable

```{r}
format_agegr1 <- function(var_input) {
  case_when(
    var_input < 18 ~ "<18",
    between(var_input, 18, 64) ~ "18-64",
    var_input > 64 ~ ">64",
    TRUE ~ "Missing"
  )
}

format_region1 <- function(var_input) {
  case_when(
    var_input %in% c("CAN", "USA") ~ "North America",
    !is.na(var_input) ~ "Rest of the World",
    TRUE ~ "Missing"
  )
}

adsl <- adsl %>%
  mutate(
    AGEGR1 = format_agegr1(AGE),
    REGION1 = format_region1(COUNTRY)
  ) # dim(adsl) 306 48

adsl %>% select(USUBJID, AGE, COUNTRY, AGEGR1, REGION1) %>% head()
```

## SAFFL

-   Safety Population Flag

-   These flags identify whether or not the subject is included in the specified population. A minimum of one subject-level population flag variable is required in ADSL. Not all of the indicators listed here need to be included in ADSL. As stated in Section 3.1.4, Item 2, only those indicators corresponding to populations defined in the statistical analysis plan or populations used as a basis for analysis need be included in ADSL. This list of flags is not meant to be all-inclusive. Additional population flags may be added. The values of subject-level population flags cannot be blank. If a flag is used, the corresponding numeric version (\*FN, where 0=no and 1=yes) of the population flag can also be included. Please also refer to Section 3.1.4.

-   Since the populations flags are mainly company/study specific no dedicated functions are provided, but in most cases they can easily be derived using `derive_var_merged_exist_flag`.

```{r}
adsl <- adsl %>%
  derive_var_merged_exist_flag(
    dataset_add = ex,
    by_vars = exprs(STUDYID, USUBJID),
    new_var = SAFFL,
    condition = (EXDOSE > 0 | (EXDOSE == 0 & str_detect(EXTRT, "PLACEBO")))
  ) # dim(adsl) 306 49

adsl %>% select(USUBJID, ARM, ACTARM, SAFFL) %>% head()
```

# References

[Creating ADSL](https://cran.r-project.org/web/packages/admiral/vignettes/adsl.html)

[ADaM Subject-level Analysis - ADSL Dataset](https://www.cdisc.org/kb/examples/adam-subject-level-analysis-adsl-dataset-80283806)
