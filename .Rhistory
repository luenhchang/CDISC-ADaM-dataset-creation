}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- fluidPage(
tags$head(
tags$script(src = "https://code.jquery.com/jquery-3.6.0.min.js"),
tags$script(src = "https://cdnjs.cloudflare.com/ajax/libs/jquery-sparklines/2.1.2/jquery.sparkline.min.js"),
tags$script("
$(document).ready(function() {
console.log('Document ready');
});
")
),
DTOutput("myTable")
)
server <- function(input, output, session) {
# Sample data
data <- data.frame(
Name = c("Product A", "Product B", "Product C"),
Sales2022 = c(100, 150, 120),
Sales2023 = c(120, 180, 90),
Trend = I(list(
c(90, 95, 100, 105, 120),  # Trend for Product A
c(140, 160, 150, 170, 180),  # Trend for Product B
c(110, 105, 90, 95, 90)    # Trend for Product C
))
)
output$myTable <- renderDT({
datatable(
data[, 1:3],  # Only show first three columns
options = list(
pageLength = 10,
columnDefs = list(
list(
targets = 3,  # Add a new column
render = JS("
function(data, type, row, meta) {
return '<span class=\"sparkline\" data-row=\"' + meta.row + '\"></span>';
}
")
)
)
),
callback = JS("
function(table) {
// Predefined trend data
var trendData = [
[90, 95, 100, 105, 120],
[140, 160, 150, 170, 180],
[110, 105, 90, 95, 90]
];
// Wait for table to be drawn
table.on('draw', function() {
$('.sparkline').each(function(index) {
$(this).sparkline(trendData[index], {
type: 'line',
width: '100px',
height: '30px',
lineColor: 'blue',
fillColor: false
});
});
});
}
")
)
})
}
shinyApp(ui, server)
library(shiny)
library(DT)
ui <- fluidPage(
h1("Test DataTable"),
DTOutput("myTable")
)
server <- function(input, output, session) {
output$myTable <- renderDT({
datatable(
data.frame(
Name = c("Product A", "Product B", "Product C"),
Sales2022 = c(100, 150, 120),
Sales2023 = c(120, 180, 90)
)
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
# Include necessary JavaScript libraries
tags$head(
tags$script(src = "https://code.jquery.com/jquery-3.6.0.min.js"),
tags$script(src = "https://cdnjs.cloudflare.com/ajax/libs/jquery-sparklines/2.1.2/jquery.sparkline.min.js")
),
h1("Sales Trends"),
DTOutput("myTable")
)
server <- function(input, output, session){
server <- function(input, output, session){
# Prepare data with trend information
data <- data.frame(
Name = c("Product A", "Product B", "Product C"),
Sales2022 = c(100, 150, 120),
Sales2023 = c(120, 180, 90),
Trend = I(list(
c(90, 95, 100, 105, 120),  # Trend for Product A
c(140, 160, 150, 170, 180),  # Trend for Product B
c(110, 105, 90, 95, 90)    # Trend for Product C
))
)
output$myTable <- renderDT({
# Prepare display data (excluding Trend column)
display_data <- data[, 1:3]
datatable(
display_data,
options = list(
pageLength = 10,
columnDefs = list(
list(
targets = "_all",  # Apply to all columns
render = JS(
"function(data, type, row, meta) {
return data;
}"
)
)
)
),
callback = JS(
"function(table) {
var trendData = ",
# Convert R list to JavaScript array
paste0("[",
paste(
lapply(data$Trend, function(x) paste0("[", paste(x, collapse = ","), "]")),
collapse = ","
),
"];
table.on('draw', function() {
table.rows().every(function(rowIdx) {
var $row = $(table.row(rowIdx).node());
var $cell = $('<td></td>').appendTo($row);
$cell.sparkline(trendData[rowIdx], {
type: 'line',
width: '100px',
height: '30px',
lineColor: 'blue',
fillColor: false
});
});
});
}"
)
)
})
server <- function(input, output, session) {
library(shiny)
library(DT)
library(jsonlite)
ui <- fluidPage(
# Include necessary JavaScript libraries
tags$head(
tags$script(src = "https://code.jquery.com/jquery-3.6.0.min.js"),
tags$script(src = "https://cdnjs.cloudflare.com/ajax/libs/jquery-sparklines/2.1.2/jquery.sparkline.min.js")
),
h1("Sales Trends"),
DTOutput("myTable")
)
server <- function(input, output, session) {
# Prepare data with trend information
data <- data.frame(
Name = c("Product A", "Product B", "Product C"),
Sales2022 = c(100, 150, 120),
Sales2023 = c(120, 180, 90),
Trend = I(list(
c(90, 95, 100, 105, 120),  # Trend for Product A
c(140, 160, 150, 170, 180),  # Trend for Product B
c(110, 105, 90, 95, 90)    # Trend for Product C
))
output$myTable <- renderDT({
library(reactable)
reactable(iris)
?reactable
# For convenience, you can also specify a default colDef() to use for all columns in defaultColDef:
reactable(
iris[1:5, ],
defaultColDef = colDef(
header = function(value) gsub(".", " ", value, fixed = TRUE),
cell = function(value) format(value, nsmall = 1),
align = "center",
minWidth = 70,
headerStyle = list(background = "#f7f7f8")
),
columns = list(
Species = colDef(minWidth = 140)  # overrides the default
),
bordered = TRUE,
highlight = TRUE
)
# For convenience, you can also specify a default colDef() to use for all columns in defaultColDef:
reactable(
iris[1:5, ]
,defaultColDef = colDef(
header = function(value) gsub(".", " ", value, fixed = TRUE)
,cell = function(value) format(value, nsmall = 1)
,align = "center"
,minWidth = 70
,headerStyle = list(background = "#f7f7f8")
)
,columns = list(
Species = colDef(minWidth = 140)  # overrides the default
)
,bordered = TRUE
,highlight = TRUE
,defaultSorted = c("Species", "Petal.Length")
)
# For convenience, you can also specify a default colDef() to use for all columns in defaultColDef:
reactable(
iris[1:5, ]
,defaultColDef = colDef(
header = function(value) gsub(".", " ", value, fixed = TRUE)
,cell = function(value) format(value, nsmall = 1)
,align = "center"
,minWidth = 70
,headerStyle = list(background = "#f7f7f8")
)
,columns = list(
Species = colDef(minWidth = 140)  # overrides the default
)
,bordered = TRUE
,highlight = TRUE
,defaultSorted = c("Species", "Petal.Length")
)
# For convenience, you can also specify a default colDef() to use for all columns in defaultColDef:
reactable(
iris[1:5, ]
,defaultColDef = colDef(
header = function(value) gsub(".", " ", value, fixed = TRUE)
,cell = function(value) format(value, nsmall = 1)
,align = "center"
,minWidth = 70
,headerStyle = list(background = "#f7f7f8")
,sortNALast = TRUE
)
,columns = list(
Species = colDef(minWidth = 140)  # overrides the default
)
,bordered = TRUE
,highlight = TRUE
,defaultSorted = c("Species", "Petal.Length")
)
# For convenience, you can also specify a default colDef() to use for all columns in defaultColDef:
reactable(
iris[1:5, ]
,defaultColDef = colDef(
header = function(value) gsub(".", " ", value, fixed = TRUE)
,cell = function(value) format(value, nsmall = 1)
,align = "center"
,minWidth = 70
,headerStyle = list(background = "#f7f7f8")
# Sort missing values last
,sortNALast = TRUE
)
,columns = list(
Species = colDef(minWidth = 140)  # overrides the default
)
,bordered = TRUE
,highlight = TRUE
,defaultSorted = c("Species", "Petal.Length")
,showPagination = TRUE
)
# Cell rendering
data <- MASS::Cars93[1:5, c("Manufacturer", "Model", "Type", "AirBags", "Price")]
head(data)
reactable(data, columns = list(
Model = colDef(cell = function(value, index) {
# Render as a link
url <- sprintf("https://wikipedia.org/wiki/%s_%s", data[index, "Manufacturer"], value)
htmltools::tags$a(href = url, target = "_blank", as.character(value))
}),
AirBags = colDef(cell = function(value) {
# Render as an X mark or check mark
if (value == "None") "\u274c No" else "\u2714\ufe0f Yes"
}),
Price = colDef(cell = function(value) {
# Render as currency
paste0("$", format(value * 1000, big.mark = ","))
})
))
# Embedding HTML widgets
library(dplyr)
library(sparkline)
data <- chickwts %>%
group_by(feed) %>%
summarise(weight = list(weight)) %>%
mutate(boxplot = NA, sparkline = NA)
dim(data)
data
reactable(data, columns = list(
weight = colDef(cell = function(values) {
sparkline(values, type = "bar", chartRangeMin = 0, chartRangeMax = max(chickwts$weight))
}),
boxplot = colDef(cell = function(value, index) {
sparkline(data$weight[[index]], type = "box")
}),
sparkline = colDef(cell = function(value, index) {
sparkline(data$weight[[index]])
})
))
# To use reactable in Shiny apps, use renderReactable() and reactableOutput():
library(shiny)
library(reactable)
ui <- fluidPage(
titlePanel("reactable example"),
reactableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderReactable({
reactable(iris)
})
}
shinyApp(ui, server)
ui
server
shinyApp(ui, server)
server <- function(input, output, session) {
output$table <- renderReactable({
#reactable(iris)
reactable(data, columns = list(
weight = colDef(cell = function(values) {
sparkline(values, type = "bar", chartRangeMin = 0, chartRangeMax = max(chickwts$weight))
}),
boxplot = colDef(cell = function(value, index) {
sparkline(data$weight[[index]], type = "box")
}),
sparkline = colDef(cell = function(value, index) {
sparkline(data$weight[[index]])
})
))
})
}
shinyApp(ui, server)
?reactable
dim(iris)
names(iris)
names(data)
#| echo: false
library(admiral)
library(dplyr, warn.conflicts = FALSE)
library(pharmaversesdtm)
library(lubridate)
library(stringr)
library(tibble)
data("admiral_adsl")
data("vs")
adsl <- admiral_adsl # dim(adsl) 306 50
vs <- convert_blanks_to_na(vs) # dim(vs) 29643 24
adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01A, TRT01P)
advs <- derive_vars_merged(
dataset=vs
,dataset_add = adsl
,new_vars = adsl_vars
,by_vars = exprs(STUDYID, USUBJID)
) # dim(advs) 29643 28
advs %>% select(USUBJID,VSTESTCD,VSDTC,VISIT,TRTSDT,TRTEDT,TRT01A,	TRT01P) %>% head(n=10)
# ADT derived from VSDTC
advs <- derive_vars_dt(advs, new_vars_prefix = "A", dtc = VSDTC,
# Partial date imputed to the first of the month
#highest_imputation = "M"
) # dim(advs) 29643 29
advs %>% select(USUBJID,VISIT,VSDTC,ADT) %>% head(n=10)
advs <- derive_vars_dy(advs, reference_date = TRTSDT, source_vars = exprs(ADT)) # dim(advs) [1] 29643    30
advs %>% select(USUBJID, VISIT, ADT, ADY,TRTSDT) %>% head(n=10)
# Create the param_lookup data.frame
param_lookup <- data.frame(
VSTESTCD = c("HEIGHT", "WEIGHT", "DIABP", "MAP", "PULSE", "SYSBP", "TEMP"),
PARAMCD = c("HEIGHT", "WEIGHT", "DIABP", "MAP", "PULSE", "SYSBP", "TEMP"),
PARAM = c("Height (cm)", "Weight (kg)", "Diastolic Blood Pressure (mmHg)",
"Mean Arterial Pressure", "Pulse Rate (beats/min)",
"Systolic Blood Pressure (mmHg)", "Temperature (C)"),
PARAMN = c(1, 2, 3, 4, 5, 6, 7),
PARCAT1 = c("Subject Characteristic", "Subject Characteristic", "Vital Sign",
"Vital Sign", "Vital Sign", "Vital Sign", "Vital Sign"),
PARCAT1N = c(1, 1, 2, 2, 2, 2, 2),
stringsAsFactors = FALSE
) # dim(param_lookup) 7 6
advs <- derive_vars_merged_lookup(
advs,
dataset_add = param_lookup,
new_vars = exprs(PARAMCD),
by_vars = exprs(VSTESTCD)
)
# All `VSTESTCD` are mapped.
# dim(advs) [1] 29643    31
advs %>% select(USUBJID,VSTESTCD,PARAMCD) %>% head(n=10)
advs <- mutate(
advs,
AVAL = VSSTRESN
) # dim(advs) [1] 29643    32
advs %>% select(VSTESTCD,PARAMCD,VSSTRESN,VSSTRESC,AVAL) %>% head(n=10)
# Mean Arterial pressure (MAP) created as AVAL
advs <- derive_param_map(
advs,
by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars, VISIT, VISITNUM, ADT, ADY, VSTPT, VSTPTNUM),
set_values_to = exprs(PARAMCD = "MAP"),
get_unit_expr = VSSTRESU,
filter = VSSTAT != "NOT DONE" | is.na(VSSTAT)
) # dim(advs) [1] 37848    32
advs %>% select(VSTESTCD,PARAMCD,VISIT,VSTPT,AVAL) %>% head(n=10)
dim(advs)
advs <- derive_param_bsa(
advs,
by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars, VISIT, VISITNUM, ADT, ADY, VSTPT, VSTPTNUM),
method = "Mosteller",
set_values_to = exprs(PARAMCD = "BSA"),
get_unit_expr = VSSTRESU,
filter = VSSTAT != "NOT DONE" | is.na(VSSTAT),
constant_by_vars = exprs(USUBJID)
)
dim(advs)
adsl_vars
advs %>% select(VSTESTCD,PARAMCD,VISIT,VSTPT,AVAL) %>% head(n=10)
advs %>% select(VSTESTCD,PARAMCD,VISIT,VSTPT,AVAL) %>% tail(n=10)
advs <- derive_param_bmi(
advs,
by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars, VISIT, VISITNUM, ADT, ADY, VSTPT, VSTPTNUM),
set_values_to = exprs(PARAMCD = "BMI"),
get_unit_expr = VSSTRESU,
filter = VSSTAT != "NOT DONE" | is.na(VSSTAT),
constant_by_vars = exprs(USUBJID)
)
dim(advs)
advs %>% select(VSTESTCD,PARAMCD,VISIT,VSTPT,AVAL) %>% tail(n=10)
adeg <- tibble::tribble(
~USUBJID, ~EGSTRESU, ~PARAMCD, ~AVAL, ~VISIT,
"P01", "msec", "QT", 350, "CYCLE 1 DAY 1",
"P01", "msec", "QT", 370, "CYCLE 2 DAY 1",
"P01", "msec", "RR", 842, "CYCLE 1 DAY 1",
"P01", "msec", "RR", 710, "CYCLE 2 DAY 1"
)
adeg <- derive_param_qtc(
adeg,
by_vars = exprs(USUBJID, VISIT),
method = "Fridericia",
set_values_to = exprs(PARAMCD = "QTCFR"),
get_unit_expr = EGSTRESU
)
dim(adeg)
adeg
adlb <- tibble::tribble(
~USUBJID, ~PARAMCD, ~AVAL, ~PARAM, ~VISIT,
"P01", "WBC", 33, "Leukocyte Count (10^9/L)", "CYCLE 1 DAY 1",
"P01", "WBC", 38, "Leukocyte Count (10^9/L)", "CYCLE 2 DAY 1",
"P01", "LYMLE", 0.90, "Lymphocytes (fraction of 1)", "CYCLE 1 DAY 1",
"P01", "LYMLE", 0.70, "Lymphocytes (fraction of 1)", "CYCLE 2 DAY 1"
)
derive_param_wbc_abs(
dataset = adlb,
by_vars = exprs(USUBJID, VISIT),
set_values_to = exprs(
PARAMCD = "LYMPH",
PARAM = "Lymphocytes Abs (10^9/L)",
DTYPE = "CALCULATION"
),
get_unit_expr = extract_unit(PARAM),
wbc_code = "WBC",
diff_code = "LYMLE",
diff_type = "fraction"
)
# Derive PARAM and PARAMN
advs <- derive_vars_merged(
advs,
dataset_add = select(param_lookup, -VSTESTCD),
by_vars = exprs(PARAMCD)
)
dim(advs)
advs %>% select(VSTESTCD, PARAMCD,PARAM,PARAMN,PARCAT1,PARCAT1N) %>% head(n=10)
advs %>% select(VSTESTCD, PARAMCD,PARAM,PARAMN,PARCAT1,PARCAT1N) %>% tail(n=10)
advs %>% select(VSTESTCD, PARAMCD,PARAM,PARAMN,PARCAT1,PARCAT1N) %>% head(n=10)
advs <- advs %>%
mutate(
AVISIT = case_when(
str_detect(VISIT, "SCREEN") ~ NA_character_,
str_detect(VISIT, "UNSCHED") ~ NA_character_,
str_detect(VISIT, "RETRIEVAL") ~ NA_character_,
str_detect(VISIT, "AMBUL") ~ NA_character_,
!is.na(VISIT) ~ str_to_title(VISIT)
),
AVISITN = as.numeric(case_when(
VISIT == "BASELINE" ~ "0",
str_detect(VISIT, "WEEK") ~ str_trim(str_replace(VISIT, "WEEK", ""))
)),
ATPT = VSTPT,
ATPTN = VSTPTNUM
)
count(advs, VISITNUM, VISIT, AVISITN, AVISIT)
count(advs, VSTPTNUM, VSTPT, ATPTN, ATPT)
advs <- derive_var_ontrtfl(
advs,
start_date = ADT,
ref_start_date = TRTSDT,
ref_end_date = TRTEDT
)
dim(advs)
advs %>% select(USUBJID,PARAMCD,ADT,TRTSDT,TRTEDT,ONTRTFL) %>% head(n=10)
advs <- derive_var_ontrtfl(
advs,
start_date = ADT,
ref_start_date = TRTSDT,
ref_end_date = TRTEDT,
ref_end_window = 60
)
dim(advs)
